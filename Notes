Data Structure in Java

1. Array
2. String
3. List
4. Stack
5. Queue
6. Map
7. Set

------------------------------------------------------------------------------------------------------------------------
 Array
    * Store element of the same data type
    * Element can be accessed directly by using its index
    * non-primitive,
        - The eight primitives Data Types defined in Java are int, byte, short, long, float, double, boolean and char.
    * homogeneous

 Advantages of Array
    * Code Optimization
    * Random Access
    * Easy to traverse data
    * Easy to manipulate data
    * Easy to sort data

 Type's of Array
    1. Single dimensional array
    2. Multi-dimensional array (calculation -> Metrics, Table, Vectors)

 Learn More: Array in Java
 -  https://www.javatpoint.com/array-in-java
 - https://www.scaler.com/topics/java/one-dimensional-array-in-java/
------------------------------------------------------------------------------------------------------------------------

 String
    * A String is an object that represents a sequence of characters.
    * It is used to store and manipulate
    * String are immutable, which means once a string object is created. its value cannot be changed.
    * However, you can create new string by performing various operations in existing strings.

 There are two ways to create a String Object:
    1. By String Literal - Java String literal is created by using double quotes
            String s = "Kapilan";
    2. By new key word
            String s = new String("Kapilan");

 Type of String
    1. Immutable String - Can't be changed (cannot grow)
        - String class (Using String Literal or double quotes and "new" key word)
    2. Mutable String  - Can be changed
        - StringBuilder and StringBuffer class

 String Methods
    - String Split() - Splits the sting at the specified string (regex)
    - String CompareTo() - Compares two strings in the dictionary order
    - String length() - Returns the length of the string
    - String replace() - Replace all matching characters/text in the string
    - String contains() - Checks whether the string contains a substring
    - String trim() - Removes any leading and trailing whitespace
    - String concat() - Concatenates two strings and returns it
    - String indexOf() - Returns the index of the character/substring

 StringBuffer
    - It's a class and Mutable sequence of characters
    - Can change contents of the buffer without creating a new object.
    - It provides an alternative to the immutable String class, allowing you to modify the contents of
      a string without creating a new object every time.

 StringBuffer Methods
    - append() - used to add characters, strings or others to the end of the buffer.
    - insert() - used to insert characters, strings, or other objects at a specified position in buffer.
    - delete() - used to remove characters from the buffer.
    - reverse() - used to revers the order of the character in the buffer.

 String Pool in Java
    (To store Strings with the same value in a common memory area for better performance and memory utilization.)
    String pool is nothing but a storage area in Java heap where string literals stores.
    It is also known as String Intern Pool or String Constant Pool.
    It is just like object allocation.
    By default, it is empty and privately maintained by the Java String class

 Learn More: String in Java
    - https://www.scaler.com/topics/java/strings-in-java-vs-strings-in-cpp/
    - https://www.javatpoint.com/java-string

------------------------------------------------------------------------------------------------------------------------
 Java Collection Framework
    (All had it during our childhood, where we used to store our coins.
    The piggy bank is called the collection and the coins are nothing but objects.
    A collection is an object or a container that stores a group of other objects.)

    * Collection Framework provides an architecture to store and manipulate a group of objects.
    * Reduces the effort required to write the code by providing data structures and algorithms.
    * Provides high-performance and high-quality data structure thereby increasing the speed.

    Java Collection Framework includes the following:
        - Interface
        - Classes
        - Algorithm

    When we say interface; an interface is an abstract type of object.
    It is in top-most position in the framework hierarchy.
    Consider it in a layman term, it is a group of related methods with empty bodies.
    Also you can call it as an abstraction,
    which is a process of hiding the implementation details from the user and by providing the functionality only.

    we have Algorithm. It is a method that perform useful calculation, computation and comparison.
    Suggest searching and sorting on objects that implement collection interface.

    Learn More:
        https://www.geeksforgeeks.org/collections-in-java-2/

 -----------------------------------------------------------------------------------------------------------------------

 The Collection Interface
     * The Collection Interface is a member of the java Collections Frame work.
     * The Collection Interface is a root interface of Java collections framework.
     * There is no direct implementation of this interface by any class.
     * However, it is implemented through its sub interfaces like List, Set, and Queue.
     * All classes of collection framework implement the sub interface of the Collection Interface.

    Learn More:
        https://www.geeksforgeeks.org/collection-interface-in-java-with-examples/

 -----------------------------------------------------------------------------------------------------------------------
 List Interface
    * List interface that extends the collection interface
    * A List is an ordered collection of elements that allows duplicate elements.
    * Ordered collection means the order in which the elements are being inserted and they contain a specific value.
      The element presence can be accessed or inserted by their position in the list by using zero based indexing
      where the index starts from zero.
    * The List interface in Java provides a way to store the ordered collection.
    * The List interface is found in java.util package and inherits the collection interface
    * There are several classes in Java that implement the List interface, including:
        - Vector
        - ArrayList
        - LinkedList

    Learn More: https://www.geeksforgeeks.org/list-interface-java-examples/

 -----------
 ArrayList
    * This class provides a resizable array implementation of the List Interface
    * It is similar to an array but can dynamically increase or decrease its size as elements are added or removed.
    * Since the ArrayList cannot be used for the primitive data types like int caterer Integer,
      you need to use a wrapper classes, which starts from the capital letter.

    Syntax:
        ArrayList<String> object = new ArrayList<String>();

 ArrayList Methods
    * boolean add(Collection c)
        - Appends the specified element to the end of a list
    * void add(int index, Object element)
        - Inserts the specified element at the specified position.
    * Void clear()
        - Removes all the elements from the list
    * int lastindexOf(Object o)
        - Return the index in this list of the last occurrence of the specified element,
          or -1 if the list does not contain this element.
    * Object clone()
        - Return a shallow copy of an ArrayList.
    * Object[] to Array()
        - Return a shallow copy of an ArrayList.
    * void trimToSize()
        - Trims the capacity of this ArrayList instance to be list's current size.

 Learn More: https://www.geeksforgeeks.org/arraylist-in-java/

 ----------
 LinkedList
    * LinkedList class that extends the list Deque and Queue interface.
    * Elements are called nodes.
    * LinkedList class by default added into this collection interface.

 ----------
 Vector
    * Vector is like the dynamic array which can grow or shrink its size.
    * Unlike array, we can store n-number of elements in it as there is no size limit.
    * It is found in the java.util package and implements the List interface
    *  One important thing that you need to understand,
       when it is synchronized it means only one thread at a time can access the code.
       This means if one thread is working on Vector, no other thread can get a hold of it.

    Syntax:
        public class Vector<E> extends AbstractList<E> implements List<E>, RandomAccess, Cloneable, Serializable
        - Here, E is the type of element like Integer, String

     * The element of the vector object can be accessed via an index into the vector.
     * It is similar to ArrayList, but mainly two differences:
        -  Vector is synchronized
        -  Vector contains many legacy methods that are not part of the collection framework.

 Vector Methods
    * add()
        - It is used to append the specified element in the given Vector.
    * addAll()
        - It is used to append all of elements in specified collection to the end of this Vector.
    * addElement()
        - It is used to append the specified component to the end of this Vector.
    * capacity()
        - It is used to get the current capacity of this Vector
    * contains()
        - It returns true if the Vector contains the specified element.
    * equals()
        - It is used to compare the specified object with the Vector for equality.
    * get()
        - It is used ti get an element at the specified position in the vector.
    * indexOf()
        - It is used to get the index of the first occurrence of the specified element in the Vector.


 Learn More:
    https://www.geeksforgeeks.org/java-util-vector-class-java/


 -----------------------------------------------------------------------------------------------------------------------
 Stack
    * Stack class extends the Vector class.
    * Stack is linear data structure in which insertion and deletion of element can be done only at one end call the top
    * Its top element and works in Last-In-First-Out(LIFO) manner
    * It also implements interfaces List, Collection, Iterable, Cloneable, Serializable
    * Put an object on the top of Stack - push Method
    * remove and return the top element in the Stack - pop Method
    * Before using the Stack class, we must import the java.util package.
    * Example: Books Stacked over one another.

    Syntax:
        Stack<E> stack = new Stack<E>();

    Note:
     stack extends the vector class and vector implements the Itrable, collection and list interface in the
     multilevel inheritance. So in short, Stack  has the implementation of the methods coming from the iterable,
     collection and list interface and also from the vector class.

    Applications of Stack:
        - Browser (Back button)
        - Tree Traversal (binary tree)
        - Editors
        - Recursions
        - Expression Evaluation
        - Parsing

 Methods of Stack Class
    * We can perform push, pop, peek and search operation on the stack
    * The Java Stack class provides mainly five methods to perform these operations

    * empty()
        - The method checks the stack is empty or not.
    * push(E item)
        - The method pushes (insert) an element onto the top of the stack.
    * pop()
        - The method removes an element an from the top of the stack and returns the sane element
          as the value of that function.
    * peek()
        - The method looks at the top element of the stack without removing it.
    * search(Object o)
        - The method searches the specified object and returns the position of the object

------------------------------------------------------------------------------------------------------------------------

 Queues
    * Queue is an interface that extends from the collection interface.
    * The queue in data structure is an ordered, linear sequence of items.
    * It is a FIFO (First In First Out) data structure.
    * There are two ends, Insert an item to the rear, remove the item from the front
    * Queue is a sequential data type, unlike an array
    * A Queue in data structure can be accessed from both of its side (front for deletion and rear for insertion)
    * A queue can be implemented using array, linked list, stack or vectors.

 Applications of Queue in Real life
    - People on an escalator
    - Cashier line in a store
    - A car wash line
    - one way exit

 Basic Queue Operation
    * enqueue()
        - process of adding or storing an element to the end of the queue
    * dequeue()
        - process of removing or accessing an element from the front of the queue
    * peek()
        - Used to get the element at the front of the queue with out removing it
    * initialize()
        - Creates an empty queue
    * isfull()
        - Check if the queue is full
    * isempty()
        - Check if the queue is empty

 What is the Different:
    Queue vs PriorityQueue


------------------------------------------------------------------------------------------------------------------------
 Map (like a Dictionary)
    * A Map contains values on the basis of key, i.e key and value pair
    * Each key and value pair is known as an entry
    * Map contains unique keys
    * A Map is useful if you have to search, update or delete elements on the basis of key.
    * There are two interfaces for implementing Map in Java: Map and SortedMap.
    * And three classes: HashMap, LinkedHashMap, and TreeMap.
    * A Map does not allow duplicate keys, but you can have duplicate values.
    * HashMap and LinkedHashMap allow null keys and values.
    * but TreeMap doesn't allow any null keys and values.

 Map Methods
    * Object put(Object Key, Object value)
        - Inserts an entry in the map
    * void putAll(Map map)
        - Inserts the specified map in the map
    * Object remove(Object key)
        - Deletes an entry for the specified key
    * Object get(Object key)
        - Returns the value for the specified key
    * boolean containsKey(Object key)
        - Searches the specified key from this map
    * Set keySet()
        - Returns the Set view containing all the keys
    * Set entrySet()
        - Returns the Set view containing all the keys and values.
    * Object getKey()
        - Used to obtain key
    * Object getValue()
        - Used to obtain value

 Map Exceptions
    * NoSuchElementException
        - This occurs when no items exist in the invoking map
    * ClassCastException
        - This occurs when an object is incompatible with the elements in a map
    * NullPointerException
        - This occurs when if an attempt is made to use a null object and null is not allowed in the map
    * UnsupportedOperationException
        - This occurs when an attempt is made to change a map which is unmodifiable

 Read More: https://www.geeksforgeeks.org/map-interface-java-examples/
 ---------------------------------------
 HashMap
    * It provides the basic implementation of the Map interface of Java.
    * It store the data in (Key, Value) pairs.
    * To access a value one must know its key
    * This class uses a technique called Hashing.
    * Hashing is a technique of converting a large String to a small String that represents same String.
    * A Shorter value helps in indexing and faster searches.
    * keys should be unique. If you try to insert the duplicate key,
      it will replace the element of the corresponding key.
    * It is easy to perform operations using the key index like updation, deletion, etc
    * HashMap in Java is like the legacy Hashtable class, but it is not synchronized.
    * It allows us to store the null elements as well, but there should be only one null key.
    * It inherits the AbstractMap class and implements the Map interface.


    * Syntax
        //HashMap creation with 8 capacity and 0.6 load factor
        HashMap<K, V> numbers = new HashMap<>();

 HashMap Class Methods
    * void clear()
        - It is used to remove all of the mappings for this map.
    * boolean isEmpty()
        - It is used to return true if it this map contains no key-value mappings.
    * Object clone()
        - It is used to return a shallow copy of the HashMap instance.
    * Set entrySet()
        - It is used to return a collection view of the mappings contained in this map.
    * Set keySet()
        - It is used to return a set view of the keys contained in this map.
    * V put(Object key, Object value)
        - It is used to insert any entry in the map.

 Read More:

---------------------------------------------
 LinkedHashMap
    * LinkedHashMap class of Java collection framework provides the hash table and
      the link list implementation of the map interface.
    * HashMap provided the advantage of quick insertion, search and deletion
    * but it never maintained the track and order of insertion which the LinkedHashMap provides
      where the elements can be accessed in their insertion order.
    * LinkedHashMap extends the HashMap class to store its entries in hash table and
      internally maintains a doubly linked list among all the entries to order its entries.
    * (Java LinkedHashMap contains values based on the key)
    * It's contains unique elements
    * May have one null key and multiple null values.
    * Its maintains insertion order
    * The initial default capacity of Java HashMap class is 16 with a load factor ot 0.75.
    * The LinkedHashMap Class is just like HashMap with an additional feature of maintaining an order of elements inserted into it
    *  HashMap provided the advantage of quick insertion, search, and deletion but it never maintained the track and order of insertion, which the LinkedHashMap provides where the elements can be accessed in their insertion order.


    * Syntax
       LinkedHashMap<Key, Value> numbers = new LinkedHashMap<>(8, 0.6f);
       //here we can modify capacity and load factor like (8, 0.6f)

 LinkedHashMap Methods
    * V get(Object key)
        - It returns the value to which the specified key is mapped.
    * void clear()
        - It removes all the key-value pairs from a map
    * boolean containsValue(Object value)
        - It returns true if the map maps on or more keys to the specified value.
    * Set<Map.Entry<K, V>>entrySet()
        - It returns a Set view of the mappings contained in the map
    * void forEach(BiConsumer<?super K, ?super V>action)
        - It performs the given action for each entry in the map until all entries have been processed.
    * V getOrDefault(Object key, V defaultValue)
        - It returns the value to which the specified key is mapped.

 Read More: https://www.geeksforgeeks.org/linkedhashmap-class-in-java/

---------------------------------------------------
 WeakHashMap
    * WeakHashMap is a Hash table based implementation of the Map interface, with weak keys.
    * Entry in WeakHashMap, will automatically be removed when its key is no longer in ordinary use.
    * Storing only weak references allows a key-value pair to be garbage-collected when its key is no longer referenced outside of the WeakHashMap.
    * This class provides the easiest way to harness the power of weak references. It is useful for implementing "registry-like" data structures, where the utility of an entry vanishes when its key is no longer reachable by any thread.
    * The WeakHashMap functions identically to the HashMap with one very important exception: if the Java memory manager no longer has a strong reference to the object specified as a key, then the entry in the map will be removed.
    * Both null values and the null key are supported.
    * This class has performance characteristics similar to those of the HashMap class and
      has the same efficiency parameters of initial capacity and load factor (16,0.75)
    * <>(16, 0.75) -> (capacity, loadFactor)
        - Capacity: Meaning, it can store 16 entries.
        - loadFactor - This means whenever our hash table is filled by 75%, the entries are moved to
          a new hash table of double the size of the original hash table.

 WeakHashMap Methods
    * clear()
        - Removes all the entries from the map
    * containsKey()
        - Checks If the map contains the specified key and returns a boolean value
    * containsValues()
        - Checks If the map contains the specified value and returns a boolean value
    * size()
        - Returns the size of the map
    * isEmpty()
        - Checks if the map is empty and returns a boolean value

 Read More: https://www.tutorialspoint.com/java/java_weakhashmap_class.htm

----------------------------------------------------------
 EnumMap
    * Java EnumMap class is the specialized Map implementation for enum keys.
      (EnumMap class of the Java collection framework
       provides a map implementation for the elements of an enum or the enum keys.)
    * It inherits Enum and AbstractMap classes.
    * It's high-performance map implementation, much faster than HashMap because the keys are prescribed.
    * All keys of each EnumMap instance must be keys of a single enum type.
    * EnumMap doesn't allow null key and throws NullPointer Exception when we attempt to insert the null key.
    * EnumMap is internally represented as arrays.
    * This representation is extremely compact and efficient.
    * EnumMap is a specialized implementation of the Map interface for enumeration types. It extends AbstractMap and implements the Map interface in Java. It belongs to java.util package.


 Advantages of EnumMap
    * Compact
    * Type-safe
    * Sorted Keys

 Read More: https://www.geeksforgeeks.org/enummap-class-java-example/

 -------------------------------------------------------------
 SortedMap
    * SortedMap is an interface in Java that is a sub-interface of the Map Interface
    * The map entries are arranged in ascending order, sorted according to their keys.
    * It ensures that the entries are kept in ascending key order. (as this interface name itself is sorted)
    * It enables very efficient manipulation of map subsets. (which is cannot create objects from it)
    * The SortedMap interface is implemented by the TreeMap and ConcurrentSkipListMap classes.

    * Syntax:
        interface SortedMap<K, V>
            extends Map<K, V>

    * The main characteristic of a SortedMap is that it orders the keys by their natural ordering,
      or by a specified comparator

    * So consider using a TreeMap when you want a map that satisfies the following criteria.
        - null key or null value is not permitted
        - The keys are sorted either by natural ordering or by a specified comparator.

    * SortedMap is an interface in the collection framework. This interface extends the Map interface and provides a total ordering of its elements (elements can be traversed in sorted order of keys). The class that implements this interface is TreeMap.
    * The SortedMap interface is a subinterface of the java.util.Map interface in Java. It extends the Map interface to provide a total ordering of its elements, based on the natural order of its keys.
    * The main difference between a SortedMap and a regular Map is that the elements in a SortedMap are stored in a sorted order, whereas in a Map the elements are stored in an arbitrary order. The sorting order is determined by the natural order of the keys, which must implement the java.lang.Comparable interface, or by a Comparator passed to the SortedMap’s constructor.



 Advantages of SortedMap
    * Sorted Order
    * Search Performance
    * Predictable Iteration order


 SortedMap Methods
    * comparator()
        - returns a comparator that can be used to order keys in a map
    * firstKey()
        - returns the first key of the sorted map
    * lastKey()
        - return the last key of the shorted
    * headMap(key)
        - returns all the entries of a map whose keys are less than the specified key
    * tailMap(key)
        - returns all entries of a map whose keys are greater than or equal to specified key
    * subMap(key1, key2)
        - returns all the entries of a map whose keys lies in between key 1 snd key2 including key1
        (subMap which strictly contains keys which fall between toKey and fromKey)

 Read More: https://www.geeksforgeeks.org/sortedmap-java-examples/

-------------------------------------------------------------
 Navigable
    * Provides the feature to navigate among the map entries and it's considered as a type of sorted map.
    * NavigableMap can be easily accessed and traversed in either ascending or descending key order
    * The performance and behavior of ascending operations are likely to be faster and
      efficient than that of the descending order.
    * It also provide ways to create a Sub Map from existing Map in Java.
    * It has various implemented features like headMap, tail, and subMap, which allows us to moreover
      do the focus onto the navigation.

    * It is an extension of SortedMap which provides convenient navigation methods like lowerKey, floorKey, ceilingKey and higherKey, and along with this popular navigation method.
    *  It also provide ways to create a Sub Map from existing Map in Java e.g. headMap whose keys are less than the specified key, tailMap whose keys are greater than the specified key, and a subMap which strictly contains keys which fall between toKey and fromKey.


    * Syntax:
        public interface NavigableMap<K, V> extends SortedMap<K, V>

 NavigableMap Methods
    * ceilingEntry(K key)
        - Returns a key-value mapping which is associated with the least key
          which is greater than or equal to the specified key.
    * ceilingKey(K key)
        - Returns the least key which is greater than equal to the specified key.
    * descendingKeySet()
        - Returns the reverse order NavigableSet view for the given keys.
    * descendingMap()
        - Returns the reverse order view of the mapping present in the map.
    * firstEntry()
        - Returns a key-value mapping which is associated with the least key in the given map.
    * floorEntry(K key)
        - Returns a key-value mapping which is associated with the greatest key
          which is less than or equal to the given key.

 Read More: https://www.geeksforgeeks.org/navigablemap-interface-in-java-with-example/

-------------------------------------------------------------
TreeMap
    * Java TreeMap Class of the Java Collection Framework.
    * Java TreeMap class is a red-black tree based implementation.
    * It provides an efficient means of storing key-value pairs in sorted order.
    * Java TreeMap contains values based on the key.
    * It implements the NavigableMap interface and extends AbstractMap class.
    * Java TreeMap contains only unique element.
    * It cannot have a null key but can have multiple null values and maintains ascending order.

    * The TreeMap in Java is used to implement Map interface and NavigableMap along with the AbstractMap Class.
    * The map is sorted according to the natural ordering of its keys, or by a Comparator provided at map creation time, depending on which constructor is used.
    * This proves to be an efficient way of sorting and storing the key-value pairs.
    * The storing order maintained by the treemap must be consistent with equals just like any other sorted map, irrespective of the explicit comparators.
    * The treemap implementation is not synchronized in the sense that if a map is accessed by multiple threads, concurrently and at least one of the threads modifies the map structurally, it must be synchronized externally.

Read More: https://www.geeksforgeeks.org/treemap-in-java/

-----------------------------------------------------------------------
Java ConcurrentHashMap
    * The ConcurrentHashMap class is introduced in JDK 1.5 belongs to java.util.concurrent package, which implements ConcurrentMap as well as to Serializable interface also.
      ConcurrentHashMap is an enhancement of HashMap as we know that while dealing with Threads in our application HashMap is not a good choice because performance-wise HashMap is not up to the mark
    * ConcurrentHashMap is a thread-safe implementation of the Map interface in Java, which means multiple threads can access it simultaneously without any synchronization issues.
    * It’s part of the java.util.concurrent package and was introduced in Java 5 as a scalable alternative to the traditional HashMap class.

Read More: https://www.geeksforgeeks.org/concurrenthashmap-in-java/






Set
--------------------------------------------------------------------------------------------------------------------------------------------------------
    * The set interface of the Java collection framework provides the feature of the mathematical
      sets in Java that extends the collection interface.
    * It is an unordered collection of objects in which duplicate values cannot be store.
    * It is an interface that implements the mathematical set
    * This interface contains the methods inherited from the collection interface
    * A feature that restricts the insertion of the duplicate elements.

    * Declaration:
        public interface Set extends Collection

    * Since Set is an interface, we cannot create object from it
    * Use the functionalities of the Set interface, We can use these classes:
        1. EnumSet
        2. HashSet
        3. LinkedHashSet
        4. TreeSet

    * Set interface is also extended by these sub interfaces:
        1. SortedSet
        2. NavigableSet

    * Java Set interface allow us to perform basic mathematical set operations like:
        1. Union
            - To get the union of two sets x and y, we acn use x.addAll(y)
        2. Intersection
            - To get the intersection of two sets x and y, we can use x.retainAll(y)
        3. Subset
            - To check if x is a subset of y, we can use y.containsAll(x)

-----------------------------------------------------------
HashSet
    - Java HashSet class is used to create a collection that uses a hash table for storage.
    - It inherits the AbstractSet class and implements Set interface.
    - HashSet stores the elements by using a mechanism called hashing
    - HashSet contains unique elements only.
    - HashSet allows null value
    - HashSet is the best approach for search operations
    - Here, elements are inserted on the basics of their hashcode.
    - The initial default capacity of HashSet is 16, and the laod factor is 0.75

    - Declaration of HashSet
        public class HashSet<E> extends AbstractSet<E>
        implements Set<E>, Cloneable, Serializable

        // Where E is the type of elements stored in a HashSet


----------------------------------------------------------------------
EnumSet
    - It extends abstractClass class and implements Set Interface in Java.
    - It's a high-performance set implementation, much faster than HashSet.
    - EnumSet does not have public constructors, so we must use the predefined methods to create the EnumSet.
    - All of the elements in an EnumSet must come from a single enumeration type that is specified
      when the set is created either explicitly or implicitly.
    - Id does not allow null Objects and throws NullPointerException if we do so.
    - It uses a fail-safe iterator,
      so it won't throw ConcurrentModificationException if the collection is modified while iterating
    - EnumSet provides an efficient way to store enum values than other set implementations
      (like HashSet, TreeSet)
    - An enum set only stores enum values of a specific enum.
     (we can only insert the element of Enum type. Its because we created our empty Enum module here)
    - Hence, the JVM already knows all the possible values of set
    - This is the reason why enum set are internally implemented as a sequence of bits.
    - Bits specifies whether elements are present in the enum set or not.
    - The bit of a corresponding element is turned on if that element is present in the set.

    - Declaration:
        public abstract class EnumSet<E extends Enum<E>>

        //Here, E is the type of element stored.


EnumSet Methods
    - allOf(Class<E> elementType)
        creates an enum set containing all of the elements in specified element type
    - clone()
        Returns copy of this set.
    - complementOf(EnumSet<E> s)
        Creates an enum set with the same element type as the specified enum set.
    - copyOf(Collection<E> c)
        Creates an enum set initialized from the specified collection.
    - copyOf(EnumSet<E> s)
        Creates an enum set with the same element type as the specified enum set,
        initially containing the same elements(if any)
    - noneOf(Class<E> elementType)
        Creates an empty enum set with the specified element type.


--------------------------------------------------------------
LinkedHashSet
    -










